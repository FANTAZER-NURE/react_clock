{"version":3,"sources":["components/Clock/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","state","time","Date","timerID","this","setInterval","tick","console","log","prevProps","name","props","clearInterval","setState","className","toLocaleTimeString","Component","getRandomName","value","Math","random","toString","slice","App","hasClock","window","document","addEventListener","ReactDOM","render","getElementById"],"mappings":"6MAUaA,EAAb,4MACEC,MAAwB,CACtBC,KAAM,IAAIC,MAFd,EAKEC,aALF,yDAOE,WAAqB,IAAD,OAClBC,KAAKD,QAAUE,aACb,WACE,EAAKC,OAELC,QAAQC,IAAI,EAAKR,MAAMC,QAEzB,OAdN,gCAkBE,SAAmBQ,GACbA,EAAUC,OAASN,KAAKO,MAAMD,MAEhCH,QAAQC,IAAR,uBAA4BC,EAAUC,KAAtC,eAAiDN,KAAKO,MAAMD,SArBlE,kCAyBE,WACEE,cAAcR,KAAKD,WA1BvB,kBA6BE,WACEC,KAAKS,SAAS,CACZZ,KAAM,IAAIC,SA/BhB,oBAmCE,WACE,OACE,sBAAKY,UAAU,QAAf,UACE,wBAAQA,UAAU,cAAlB,SACGV,KAAKO,MAAMD,OAGb,YAED,sBAAMI,UAAU,cAAhB,SACGV,KAAKJ,MAAMC,KAAKc,8BA7C3B,GAA2BC,aCN3B,SAASC,IACP,IAAMC,EAAQC,KAAKC,SAASC,WAAWC,MAAM,EAAG,GAEhD,MAAM,SAAN,OAAgBJ,GAQX,IAAMK,EAAb,4MACEvB,MAAwB,CACtBwB,UAAU,EACVd,KAAMO,KAHV,uDAME,WAAqB,IAAD,OAClBQ,OAAOpB,aAAY,WACjB,EAAKQ,SAAS,CAAEH,KAAMO,QACrB,MAEHS,SAASC,iBAAiB,eAAe,WACvC,EAAKd,SAAS,CAAEW,UAAU,OAG5BE,SAASC,iBAAiB,SAAS,WACjC,EAAKd,SAAS,CAAEW,UAAU,SAhBhC,oBAoBE,WACE,IAAQA,EAAapB,KAAKJ,MAAlBwB,SAER,OACE,sBAAKV,UAAU,MAAf,UACE,6CAECU,GAAY,cAAC,EAAD,CAAOd,KAAMN,KAAKJ,MAAMU,cA3B7C,GAAyBM,aCZzBY,IAASC,OACP,cAAC,EAAD,IACAH,SAASI,eAAe,W","file":"static/js/main.781e272d.chunk.js","sourcesContent":["import { Component } from 'react';\n\ntype Props = {\n  name:string,\n};\n\ntype State = {\n  time:Date\n};\n\nexport class Clock extends Component<Props, State> {\n  state:Readonly<State> = {\n    time: new Date(),\n  };\n\n  timerID!: NodeJS.Timer;\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => {\n        this.tick();\n        // eslint-disable-next-line no-console\n        console.log(this.state.time);\n      },\n      1000,\n    );\n  }\n\n  componentDidUpdate(prevProps:Props) {\n    if (prevProps.name !== this.props.name) {\n    // eslint-disable-next-line no-console\n      console.log(`Renamed from ${prevProps.name} to ${this.props.name}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.setState({\n      time: new Date(),\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Clock\">\n        <strong className=\"Clock__name\">\n          {this.props.name}\n        </strong>\n\n        {' time is '}\n\n        <span className=\"Clock__time\">\n          {this.state.time.toLocaleTimeString()}\n        </span>\n      </div>\n    );\n  }\n}\n","import { Component } from 'react';\nimport './App.scss';\nimport { Clock } from './components/Clock/Clock';\n\nfunction getRandomName(): string {\n  const value = Math.random().toString().slice(2, 6);\n\n  return `Clock-${value}`;\n}\n\ntype State = {\n  hasClock: boolean,\n  name: string,\n};\n\nexport class App extends Component<{}, State> {\n  state:Readonly<State> = {\n    hasClock: true,\n    name: getRandomName(),\n  };\n\n  componentDidMount() {\n    window.setInterval(() => {\n      this.setState({ name: getRandomName() });\n    }, 3300);\n\n    document.addEventListener('contextmenu', () => {\n      this.setState({ hasClock: false });\n    });\n\n    document.addEventListener('click', () => {\n      this.setState({ hasClock: true });\n    });\n  }\n\n  render() {\n    const { hasClock } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n\n        {hasClock && <Clock name={this.state.name} />}\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}